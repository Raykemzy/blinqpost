// Mocks generated by Mockito 5.4.4 from annotations
// in blinqpost/test/post_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:blinqpost/model/base_response_model.dart' as _i2;
import 'package:blinqpost/model/post_model.dart' as _i5;
import 'package:blinqpost/model/user_model.dart' as _i6;
import 'package:blinqpost/services/firestore_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseResponse_0<T> extends _i1.SmartFake
    implements _i2.BaseResponse<T> {
  _FakeBaseResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FireStoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFireStoreService extends _i1.Mock implements _i3.FireStoreService {
  MockFireStoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResponse<List<_i5.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<List<_i5.Post>>>.value(
            _FakeBaseResponse_0<List<_i5.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i5.Post>>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i6.User>>> getUsers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<List<_i6.User>>>.value(
            _FakeBaseResponse_0<List<_i6.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i6.User>>>);
}

/// A class which mocks [FireStoreServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFireStoreServiceImpl extends _i1.Mock
    implements _i3.FireStoreServiceImpl {
  MockFireStoreServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BaseResponse<List<_i5.Post>>> getPosts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<List<_i5.Post>>>.value(
            _FakeBaseResponse_0<List<_i5.Post>>(
          this,
          Invocation.method(
            #getPosts,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i5.Post>>>);

  @override
  _i4.Future<_i2.BaseResponse<List<_i6.User>>> getUsers() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<_i2.BaseResponse<List<_i6.User>>>.value(
            _FakeBaseResponse_0<List<_i6.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.BaseResponse<List<_i6.User>>>);
}
